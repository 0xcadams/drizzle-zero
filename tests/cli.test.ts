import { describe, it, expect, beforeEach, afterEach } from "vitest";
import { Project } from "ts-morph";
import * as path from "node:path";
import * as fs from "node:fs/promises";
import {
  getGeneratedSchema,
  getZeroSchemaDefsFromConfig,
} from "../src/cli/cli";
import * as oneToOneSchema from "./schemas/one-to-one.zero";

describe("getGeneratedSchema", () => {
  let tsProject: Project;
  const outputFilePath = "test-output.gen.ts";
  const schemaPath = path.resolve(__dirname, "./schemas/one-to-one.zero.ts");

  beforeEach(() => {
    tsProject = new Project({
      tsConfigFilePath: path.resolve(__dirname, "../tsconfig.json"),
    });
  });

  afterEach(async () => {
    // Clean up test output file if it exists
    try {
      await fs.unlink(outputFilePath);
    } catch (error) {
      // Ignore error if file doesn't exist
    }
  });

  it("should generate schema from one-to-one.zero.ts", async () => {
    // Get the schema type declaration
    const zeroSchemaTypeDecl = await getZeroSchemaDefsFromConfig({
      tsProject,
      configPath: schemaPath,
      exportName: "schema",
    });

    // Generate the schema
    const generatedSchema = await getGeneratedSchema({
      tsProject,
      zeroSchema: oneToOneSchema.schema,
      zeroSchemaTypeDecl,
      outputFilePath,
    });

    // Verify the generated schema contains expected content
    expect(generatedSchema).toContain("export const schema = {");
    expect(generatedSchema).toContain('"users": {');
    expect(generatedSchema).toContain('"profileInfo": {');
    expect(generatedSchema).toContain("export type Schema = typeof schema");

    // Check for fields from the one-to-one schema
    expect(generatedSchema).toContain('"id": {');
    expect(generatedSchema).toContain('"name": {');
    expect(generatedSchema).toContain('"userId": {');
    expect(generatedSchema).toContain('"metadata": {');

    // Verify the auto-generated comment header
    expect(generatedSchema).toContain(
      "This file was automatically generated by drizzle-zero",
    );
  });

  it("should handle complex schema properties correctly", async () => {
    const zeroSchemaTypeDecl = await getZeroSchemaDefsFromConfig({
      tsProject,
      configPath: schemaPath,
      exportName: "schema",
    });

    // Create a modified schema with null customType to test special handling
    const complexSchema = {
      ...oneToOneSchema.schema,
      tables: {
        ...oneToOneSchema.schema.tables,
        users: {
          ...oneToOneSchema.schema.tables.users,
          customType: null,
        },
      },
    };

    // Generate the schema
    const generatedSchema = await getGeneratedSchema({
      tsProject,
      zeroSchema: complexSchema,
      zeroSchemaTypeDecl,
      outputFilePath,
    });

    // Check for special handling of null customType
    expect(generatedSchema).toContain(
      '"customType": null as typeof DrizzleConfigSchema',
    );

    // Verify other content is still correct
    expect(generatedSchema).toContain('"users": {');
    expect(generatedSchema).toContain('"profileInfo": {');
  });
});
