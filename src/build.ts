#!/usr/bin/env node

import { execSync } from "child_process";
import fs from "fs";
import path from "path";

// const DRIZZLE_SCHEMA_PATH = "drizzle-schema";
const OUTPUT_FILE = "drizzle-zero.gen.ts";
const INPUT_FILE = "zero-drizzle.ts";
const OUTPUT_DIR = "drizzle-zero";

function main() {
  console.log(
    "drizzle-zero CLI - Generating Zero schema from Drizzle ORM schemas",
  );

  try {
    // 1. Use TypeScript to generate type declarations
    generateTypeDeclarations();

    // 2. Create the final output file
    generateOutputFile();

    // 3. Clean up temporary files
    cleanUp();

    console.log(`âœ… Schema generated successfully: ${OUTPUT_FILE}`);
  } catch (error) {
    console.error("Error generating schema:", error);
    process.exit(1);
  }
}


function generateTypeDeclarations() {
  try {
    // Ensure output directory exists
    if (!fs.existsSync(OUTPUT_DIR)) {
      fs.mkdirSync(OUTPUT_DIR, { recursive: true });
    }

    // Run TypeScript compiler to generate declaration files
    // Using --files flag to specify exactly which file to compile
    execSync(
      `npx tsc ${path.resolve(INPUT_FILE)} --files --moduleResolution bundler --noEmit false --declaration --emitDeclarationOnly --skipLibCheck --outDir ${path.resolve(OUTPUT_DIR)}`,
      { stdio: 'inherit' } // Show output for debugging
    );
    console.log("Generated type declarations");
  } catch (error) {
    console.error("Error generating type declarations:", error);
    throw error;
  }
}

function generateOutputFile() {
  try {
    // Read the generated declaration file
    const declarationFilePath = path.resolve(OUTPUT_DIR, path.basename(INPUT_FILE).replace(".ts", ".d.ts"));
    const declarationContent = fs.readFileSync(declarationFilePath, "utf8");

    const { schema } = require(`./${INPUT_FILE.replace(".ts", "")}`);

    console.log(schema);

    // Generate the final output file
    const outputContent = `/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by drizzle-zero.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

${declarationContent}

// Export the schema with proper typing
export const drizzleSchema = ${JSON.stringify(schema, null, 2)} as unknown as Schema;
export type Schema = typeof schema;
`;

    fs.writeFileSync(OUTPUT_FILE, outputContent);
    console.log(`Generated schema file: ${OUTPUT_FILE}`);
  } catch (error) {
    console.error("Error generating output file:", error);
    throw error;
  }
}

function cleanUp() {
  try {
    // Remove temporary files
    // fs.unlinkSync(TEMP_FILE);
    // fs.unlinkSync(`${TEMP_FILE.replace(".ts", ".d.ts")}`);
    fs.rmSync(OUTPUT_DIR, { recursive: true, force: true });
    console.log("Cleaned up temporary files");
  } catch (error) {
    console.error("Error cleaning up:", error);
    // Don't throw here, as the main task succeeded
  }
}

// Run the script
main();
