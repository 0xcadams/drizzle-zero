import { Command } from "commander";
import * as fs from "node:fs/promises";
import * as path from "node:path";
import { pathToFileURL } from "node:url";
import {
  Project,
  VariableDeclaration,
  VariableDeclarationKind
} from "ts-morph";
import { tsImport } from "tsx/esm/api";

const defaultConfigFile = "./drizzle-zero.config.ts";
const defaultOutputFile = "./zero-schema.gen.ts";
const defaultTsConfigFile = "./tsconfig.json";

async function findConfigFile() {
  const files = await fs.readdir(process.cwd());

  const configFile = files.find((file) => file.endsWith(defaultConfigFile));
  if (!configFile) {
    console.error("❌  drizzle-zero: No configuration file found");
    process.exit(1);
  }

  return configFile;
}

async function getZeroSchemaDefsFromConfig({
  tsProject,
  configPath,
}: {
  tsProject: Project;
  configPath: string;
}) {
  const fileName = configPath.slice(configPath.lastIndexOf("/") + 1);

  const sourceFile = tsProject.getSourceFile(fileName);

  if (!sourceFile) {
    throw new Error(
      `❌ drizzle-zero: Failed to find type definitions for ${fileName}`,
    );
  }

  const zeroSchemaTypeDecl =
    sourceFile.getVariableDeclaration("_default") ??
    sourceFile.getVariableDeclaration("schema");

  if (!zeroSchemaTypeDecl) {
    throw new Error(
      "❌ drizzle-zero: No config type found in the config file - did you export `default` or `schema`?",
    );
  }

  return zeroSchemaTypeDecl;
}

async function getGeneratedSchema({
  tsProject,
  zeroSchema,
  zeroSchemaTypeDecl,
  outputFilePath,
}: {
  tsProject: Project;
  zeroSchema: unknown;
  zeroSchemaTypeDecl: VariableDeclaration;
  outputFilePath: string;
}) {
  const typename = "Schema";

  const zeroSchemaGenerated = tsProject.createSourceFile(outputFilePath, "", {
    overwrite: true,
  });

  const moduleSpecifier =
    zeroSchemaGenerated.getRelativePathAsModuleSpecifierTo(
      zeroSchemaTypeDecl.getSourceFile(),
    );

  // Add import for DrizzleConfigSchema
  zeroSchemaGenerated.addImportDeclaration({
    moduleSpecifier,
    namedImports: [
      { name: zeroSchemaTypeDecl.getName(), alias: "DrizzleConfigSchema" },
    ],
    isTypeOnly: true,
  });

  const schemaTypeAlias = zeroSchemaGenerated.addTypeAlias({
    name: typename,
    isExported: true,
    type: "typeof DrizzleConfigSchema",
  });

  schemaTypeAlias.addJsDoc({
    description:
      "\nRepresents the Zero schema type.\nThis type is auto-generated from your Drizzle schema definition.",
  });

  const stringifiedSchema = JSON.stringify(zeroSchema, null, 2).replaceAll(
    `"customType": null`,
    `"customType": null as unknown`,
  );

  const schemaVariable = zeroSchemaGenerated.addVariableStatement({
    declarationKind: VariableDeclarationKind.Const,
    isExported: true,
    declarations: [
      {
        name: "schema",
        initializer: `${stringifiedSchema} as ${typename}`,
      },
    ],
  });

  schemaVariable.addJsDoc({
    description:
      "\nThe Zero schema object.\nThis type is auto-generated from your Drizzle schema definition.",
  });

  zeroSchemaGenerated.formatText();

  const organizedFile = zeroSchemaGenerated.organizeImports();

  const file = organizedFile.getText();

  return `/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// biome-ignore-all
/*
 * ------------------------------------------------------------
 * ## This file was automatically generated by drizzle-zero  ##
 * ## Any changes you make to this file will be overwritten. ##
 * ##                                                        ##
 * ## Additionally, you should also exclude this file from   ##
 * ## your linter and/or formatter to prevent it from being  ##
 * ## checked or modified.                                   ##
 * ##                                                        ##
 * ## SOURCE: https://github.com/BriefHQ/drizzle-zero        ##
 * ------------------------------------------------------------
 */

${file}`;
}

export async function loadPrettier() {
  try {
    return await import("prettier");
  } catch (_) {}

  try {
    const path = require.resolve("prettier", { paths: [process.cwd()] });
    return await import(pathToFileURL(path).href);
  } catch {
    throw new Error(
      "⚠️  prettier could not be found. Install it locally with\n  npm i -D prettier",
    );
  }
}

async function formatSchema(schema: string): Promise<string> {
  try {
    const prettier = await loadPrettier();
    return prettier.format(schema, {
      parser: "typescript",
    });
  } catch (error) {
    console.warn("⚠️  prettier not found, skipping formatting");
    return schema;
  }
}

export interface GeneratorOptions {
  config?: string;
  tsConfigPath?: string;
  format?: boolean;
  outputFilePath?: string;
}

async function main(opts: GeneratorOptions = {}) {
  const { config, tsConfigPath, format, outputFilePath } = { ...opts };

  const configFilePath = config ?? (await findConfigFile());
  const resolvedTsConfigPath = tsConfigPath ?? defaultTsConfigFile;
  const resolvedOutputFilePath = outputFilePath ?? defaultOutputFile;

  const fullConfigPath = path.resolve(process.cwd(), configFilePath);

  try {
    await fs.access(fullConfigPath);
  } catch (error) {
    console.error(
      `❌ drizzle-zero: config file not found at ${fullConfigPath}`,
    );
    process.exit(1);
  }

  const zeroConfigImport = await tsImport(fullConfigPath, __filename);
  const zeroConfig = zeroConfigImport?.default ?? zeroConfigImport?.schema;

  if (!zeroConfig) {
    console.error(
      "❌ drizzle-zero: No config found in the config file - did you export `default` or `schema`?",
    );
    process.exit(1);
  }

  const tsProject = new Project({
    tsConfigFilePath: resolvedTsConfigPath,
  });

  const zeroSchemaTypeDecl = await getZeroSchemaDefsFromConfig({
    tsProject,
    configPath: fullConfigPath,
  });

  let zeroSchemaGenerated = await getGeneratedSchema({
    tsProject,
    zeroSchema: zeroConfig,
    zeroSchemaTypeDecl,
    outputFilePath: resolvedOutputFilePath,
  });

  if (format) {
    zeroSchemaGenerated = await formatSchema(zeroSchemaGenerated);
  }

  return zeroSchemaGenerated;
}

async function cli() {
  const program = new Command();
  program
    .name("drizzle-zero")
    .description("The CLI for converting Drizzle ORM schemas to Zero schemas");

  program
    .command("generate")
    .option(
      "-c, --config <input-file>",
      `Path to the ${defaultConfigFile} configuration file`,
      defaultConfigFile,
    )
    .option(
      "-o, --output <output-file>",
      `Path to the generated output file`,
      defaultOutputFile,
    )
    .option(
      "-t, --tsconfig <tsconfig-file>",
      `Path to the custom tsconfig file`,
      defaultTsConfigFile,
    )
    .option("-f, --format", `Format the generated schema`, false)
    .action(async (command) => {
      console.log(`⚙️  Generating zero schema from ${command.config}...`);

      const zeroSchema = await main({
        config: command.config,
        tsConfigPath: command.tsconfig,
        format: command.format,
        outputFilePath: command.output,
      });

      if (command.output) {
        await fs.writeFile(
          path.resolve(process.cwd(), command.output),
          zeroSchema,
        );
        console.log(
          `✅ drizzle-zero: Zero schema written to ${command.output}`,
        );
      } else {
        console.log({
          schema: zeroSchema,
        });
      }
    });

  program.parse();
}

// Run the main function
cli().catch((error) => {
  console.error("❌ drizzle-zero error:", error);
  process.exit(1);
});
