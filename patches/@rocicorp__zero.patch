diff --git a/out/zero-client/src/mod.d.ts b/out/zero-client/src/mod.d.ts
index 4b7fbdbc7effac91202a76094f67dc4f1579778d..6b28708504623c75399ed875e762e7ec36f02dbc 100644
--- a/out/zero-client/src/mod.d.ts
+++ b/out/zero-client/src/mod.d.ts
@@ -3,7 +3,7 @@ export type { AsyncIterableIteratorToArray, ClientGroupID, ClientID, CreateKVSto
 export type { AST, Bound, ColumnReference, CompoundKey, Condition, Conjunction, CorrelatedSubquery, CorrelatedSubqueryCondition, CorrelatedSubqueryConditionOperator, Disjunction, EqualityOps, InOps, LikeOps, LiteralReference, LiteralValue, Ordering, OrderOps, OrderPart, Parameter, SimpleCondition, SimpleOperator, ValuePosition, } from '../../zero-protocol/src/ast.js';
 export { relationships } from '../../zero-schema/src/builder/relationship-builder.js';
 export { createSchema, type Schema, } from '../../zero-schema/src/builder/schema-builder.js';
-export { boolean, enumeration, json, number, string, table, } from '../../zero-schema/src/builder/table-builder.js';
+export { boolean, enumeration, json, number, string, table, type ColumnBuilder, type TableBuilderWithColumns } from '../../zero-schema/src/builder/table-builder.js';
 export type { AssetPermissions as CompiledAssetPermissions, PermissionsConfig as CompiledPermissionsConfig, Policy as CompiledPermissionsPolicy, Rule as CompiledPermissionsRule, } from '../../zero-schema/src/compiled-permissions.js';
 export { ANYONE_CAN, definePermissions, NOBODY_CAN, } from '../../zero-schema/src/permissions.js';
 export type { AssetPermissions, PermissionRule, PermissionsConfig, } from '../../zero-schema/src/permissions.js';
diff --git a/out/zero-schema/src/builder/table-builder.d.ts b/out/zero-schema/src/builder/table-builder.d.ts
index dcb0995af3b219de46318636e7230d24b60b67fc..04d0911ddf31070c5c3d9ddd31da03b37aa4fb84 100644
--- a/out/zero-schema/src/builder/table-builder.d.ts
+++ b/out/zero-schema/src/builder/table-builder.d.ts
@@ -57,7 +57,7 @@ export declare class TableBuilderWithColumns<TShape extends TableSchema> {
     get schema(): TShape;
     build(): TShape;
 }
-declare class ColumnBuilder<TShape extends SchemaValue<any>> {
+export declare class ColumnBuilder<TShape extends SchemaValue<any>> {
     #private;
     constructor(schema: TShape);
     optional(): ColumnBuilder<Omit<TShape, 'optional'> & {
