#!/usr/bin/env node
import * as path from "node:path";
import * as fs from "node:fs/promises";
import * as os from "node:os";
import prettier from "prettier";
import { Project, type ts, type Type, VariableDeclarationKind } from "ts-morph";
import { tsImport } from "tsx/esm/api";
import { Command } from "commander";

async function findConfigFile() {
  const files = await fs.readdir(process.cwd());

  const configFile = files.find((file) =>
    file.endsWith("drizzle-zero.config.ts"),
  );
  if (!configFile) {
    console.error("Error: No configuration file found");
    process.exit(1);
  }

  return configFile;
}

async function getZeroSchemaDefsFromConfig(configPath: string) {
  const tempOutDir = await fs.mkdtemp(os.tmpdir());
  const drizzleZeroConfigProject = new Project({
    compilerOptions: {
      declaration: true,
      emitDeclarationOnly: true,
      outDir: tempOutDir,
      rootDir: "./",
    },
  });

  const configFile = drizzleZeroConfigProject.addSourceFileAtPath(configPath);
  await configFile.emit();

  const zeroSchemaTypeDefs = await fs.readFile(
    path.resolve(
      tempOutDir,
      path.relative(process.cwd(), configPath).replace(".ts", ".d.ts"),
    ),
    "utf-8",
  );
  return zeroSchemaTypeDefs;
}

function getZeroSchemaTypeFromDefs(typeDefsFile: string) {
  const zeroSchemaTypeGetter = new Project({ useInMemoryFileSystem: true });
  const zeroSchemaTypeDeclaration = zeroSchemaTypeGetter.createSourceFile(
    "zero-schema.d.ts",
    typeDefsFile,
  );
  const zeroSchemaTypeDecl =
    zeroSchemaTypeDeclaration.getVariableDeclarationOrThrow("_default");
  const zeroSchemaType = zeroSchemaTypeDecl.getType();

  return zeroSchemaType;
}

async function getGeneratedSchema(
  zeroSchema: unknown,
  zeroSchemaType: Type<ts.Type>,
) {
  const generatedPath = "zero-schema.gen.ts";
  const typename = "Schema";

  const drizzleZeroOutputProject = new Project({ useInMemoryFileSystem: true });
  const zeroSchemaGenerated = drizzleZeroOutputProject.createSourceFile(
    generatedPath,
    "",
    {
      overwrite: true,
    },
  );

  // Add zeroSchema type:
  zeroSchemaGenerated.addTypeAlias({
    name: typename,
    isExported: true,
    type: zeroSchemaType.getText(),
  });

  zeroSchemaGenerated.addVariableStatement({
    declarationKind: VariableDeclarationKind.Const,
    isExported: true,
    declarations: [
      {
        name: "schema",
        initializer: `${JSON.stringify(zeroSchema, null, 2)} as unknown as ${typename}`,
      },
    ],
  });

  await zeroSchemaGenerated.save();
  const file = await drizzleZeroOutputProject
    .getFileSystem()
    .readFile(generatedPath, "utf-8");

  return `
/* eslint-disable */
/* tslint:disable */
/* noinspection JSUnusedGlobalSymbols */
/*
 * ------------------------------------------------------------
 * ## This file was automatically generated by drizzle-zero  ##
 * ## Any changes you make to this file will be overwritten. ##
 * ##                                                        ##
 * ## SOURCE: https://github.com/BriefHQ/drizzle-zero        ##
 * ------------------------------------------------------------
 */

${file}`;
}

export interface GeneratorOptions {
  config?: string;
  format?: boolean;
}

const defaults: GeneratorOptions = {
  format: true,
};

async function main(opts: GeneratorOptions = {}) {
  const { config, format } = { ...defaults, ...opts };

  const configFilePath = config ?? (await findConfigFile());

  const fullConfigPath = path.resolve(process.cwd(), configFilePath);
  const { default: zeroSchema } = await tsImport(
    fullConfigPath,
    import.meta.url,
  );

  const zeroSchemaDefs = await getZeroSchemaDefsFromConfig(fullConfigPath);
  const zeroSchemaType = getZeroSchemaTypeFromDefs(zeroSchemaDefs);

  const zeroSchemaGenerated = await getGeneratedSchema(
    zeroSchema,
    zeroSchemaType,
  );

  const zeroSchemaFormatted = format
    ? await prettier.format(zeroSchemaGenerated, {
        parser: "typescript",
      })
    : zeroSchemaGenerated;

  return zeroSchemaFormatted;
}

async function cli() {
  const program = new Command();
  program
    .name("drizzle-zero")
    .description("The CLI for converting Drizzle schemas to Zero schemas");

  program
    .option("-c, --config <input-file>", "Path to the configuration file")
    .option("-o, --output <output-file>", "output file path")
    .option("-f, --format", "Format the output", true)
    .action(async (command) => {
      const zeroSchema = await main({
        config: command.config,
        format: command.format,
      });

      if (command.output) {
        await fs.writeFile(
          path.resolve(process.cwd(), command.output),
          zeroSchema,
        );
      } else {
        console.log(zeroSchema);
      }
    });

  program.parse();
}

// Run the main function
cli().catch((error) => {
  console.error("Error:", error);
  process.exit(1);
});
